
import math
class AI:
  def __init__(self, board):
      self.depth = 5
      self.maxTurn = True
      self.minimax(self.depth, self.maxTurn, board)
        
  def minimax (self, curDepth, maxTurn, board):
  
      # base case : targetDepth reached
      if (curDepth == 0):
          return board[1][0]
      
      if (maxTurn):
          maxEval = float('-inf')
          for i in range(1, len(board[0])):
              newboard = self.move(board, 0, i)
              eval = self.minimax(curDepth-1, maxTurn, newboard)
              maxEval = max(maxEval, eval)
          return maxEval
      
      else:
          minEval = float('inf')
          for i in range(1, len(board[0])):
              newboard = self.move(board, 2, i)
              eval = self.minimax(curDepth-1, maxTurn, newboard)
              minEval = min(min, eval)
          return minEval

  def move(self, newboard, row, column):
          board = newboard.copy()
          # find total number of columns in list
          total_columns = len(board[0])
          # get the stones number of current pit
          stones = int(board[row][column]['text'])
          if (stones != 0):
              board[row][column].config(text=0)
              changingTurn = True
              # split the stones to the next pits (anti-clockwise)
              while (stones > 0):
                  if row == 0:
                      while (column > 1 and stones > 0):
                          column = column - 1
                          newStones = int(board[row][column]['text']) + 1
                          stones = stones - 1
                          if stones == 0 and self.maxTurn == True and newStones == 1 and int(board[2][column]['text']) != 0:
                              board[row][column].config(text=0)
                              totalStones = int(board[1][0]['text']) + int(board[2][column]['text']) + 1
                              board[1][0].config(text=totalStones)
                              board[2][column].config(text=0)
                          else:
                              board[row][column].config(text=newStones)

                      if (column == 1  and stones > 0):
                          row = 2
                          column = 0 
                          if (self.maxTurn == True):
                              stones = stones - 1
                              board[1][0].config(text=int(board[1][0]['text']) + 1)
                              if stones == 0:
                                  changingTurn = False
                  else:
                      while (column < total_columns - 2 and stones > 0):
                          column = column + 1
                          newStones = int(board[row][column]['text']) + 1
                          stones = stones - 1
                          if stones == 0 and self.maxTurn == False and newStones == 1 and int(board[0][column]['text']) != 0:
                              board[row][column].config(text=0)
                              totalStones = int(board[1][total_columns - 1]['text']) + int(board[0][column]['text']) + 1
                              board[1][total_columns - 1].config(text=totalStones)
                              board[0][column].config(text=0)
                          else:
                              board[row][column].config(text=newStones)
                      
                      if (column == total_columns - 2 and stones > 0):
                          row = 0
                          column = total_columns - 1
                          if self.maxTurn == False:
                              stones = stones - 1
                              board[1][total_columns - 1].config(text=int(board[1][total_columns - 1]['text']) + 1)
                              if stones == 0:
                                  changingTurn = False
                  
              if (changingTurn == True):
                  self.maxTurn = not self.maxTurn
          return board
